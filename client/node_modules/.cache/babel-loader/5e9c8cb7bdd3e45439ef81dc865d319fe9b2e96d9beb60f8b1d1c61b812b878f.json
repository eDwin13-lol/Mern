{"ast":null,"code":"var _jsxFileName = \"/workspaces/Mern/client/src/components/PostCard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport './PostCard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PostCard = ({\n  post\n}) => {\n  _s();\n  const isReddit = post.source === 'reddit';\n  const isYoutube = post.source === 'youtube';\n  const {\n    ref,\n    inView\n  } = useInView({\n    threshold: 0.5,\n    triggerOnce: false\n  });\n\n  // Extract YouTube video ID from URL\n  const getYouTubeVideoId = url => {\n    const match = url === null || url === void 0 ? void 0 : url.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&\\n?#]+)/);\n    return match ? match[1] : null;\n  };\n  const youtubeVideoId = isYoutube ? getYouTubeVideoId(post.url) : null;\n  const handleTitleClick = e => {\n    e.stopPropagation();\n    window.open(post.url, '_blank');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-card\",\n    ref: ref,\n    children: [isYoutube && youtubeVideoId ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-video-embed\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"youtube-embed-container\",\n        children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n          width: \"100%\",\n          height: \"100%\",\n          src: inView ? `https://www.youtube.com/embed/${youtubeVideoId}?autoplay=1&mute=1&controls=1&modestbranding=1` : `https://www.youtube.com/embed/${youtubeVideoId}?mute=1&controls=1&modestbranding=1`,\n          title: post.title,\n          frameBorder: \"0\",\n          allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n          allowFullScreen: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this) : post.thumbnail && post.thumbnail !== 'self' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-thumbnail\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: post.thumbnail,\n        alt: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"post-title\",\n        onClick: handleTitleClick,\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), post.description && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"post-description\",\n        children: [post.description.substring(0, 150), \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `source-badge ${post.source}`,\n          children: [isReddit && 'Reddit', isYoutube && 'YouTube']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-stats\",\n          children: [isReddit && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat\",\n            children: [(post.score / 1000).toFixed(1), \"k\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), isYoutube && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"stat\",\n            children: [(post.views / 1000).toFixed(1), \"k views\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"post-author\",\n          children: [\"by \", post.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(PostCard, \"oyd/E8SD7Fx4uOp6P7gVV2pVlaE=\", false, function () {\n  return [useInView];\n});\n_c = PostCard;\nexport default PostCard;\nvar _c;\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"names":["React","useRef","useInView","jsxDEV","_jsxDEV","PostCard","post","_s","isReddit","source","isYoutube","ref","inView","threshold","triggerOnce","getYouTubeVideoId","url","match","youtubeVideoId","handleTitleClick","e","stopPropagation","window","open","className","children","width","height","src","title","frameBorder","allow","allowFullScreen","fileName","_jsxFileName","lineNumber","columnNumber","thumbnail","alt","onClick","description","substring","score","toFixed","views","author","_c","$RefreshReg$"],"sources":["/workspaces/Mern/client/src/components/PostCard.jsx"],"sourcesContent":["import React, { useRef } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport './PostCard.css';\n\nexport const PostCard = ({ post }) => {\n  const isReddit = post.source === 'reddit';\n  const isYoutube = post.source === 'youtube';\n  const { ref, inView } = useInView({\n    threshold: 0.5,\n    triggerOnce: false,\n  });\n\n  // Extract YouTube video ID from URL\n  const getYouTubeVideoId = (url) => {\n    const match = url?.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&\\n?#]+)/);\n    return match ? match[1] : null;\n  };\n\n  const youtubeVideoId = isYoutube ? getYouTubeVideoId(post.url) : null;\n\n  const handleTitleClick = (e) => {\n    e.stopPropagation();\n    window.open(post.url, '_blank');\n  };\n\n  return (\n    <div className=\"post-card\" ref={ref}>\n      {/* Video Embed Section */}\n      {isYoutube && youtubeVideoId ? (\n        <div className=\"post-video-embed\">\n          <div className=\"youtube-embed-container\">\n            <iframe\n              width=\"100%\"\n              height=\"100%\"\n              src={\n                inView\n                  ? `https://www.youtube.com/embed/${youtubeVideoId}?autoplay=1&mute=1&controls=1&modestbranding=1`\n                  : `https://www.youtube.com/embed/${youtubeVideoId}?mute=1&controls=1&modestbranding=1`\n              }\n              title={post.title}\n              frameBorder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n              allowFullScreen\n            ></iframe>\n          </div>\n        </div>\n      ) : post.thumbnail && post.thumbnail !== 'self' ? (\n        <div className=\"post-thumbnail\">\n          <img src={post.thumbnail} alt={post.title} />\n        </div>\n      ) : null}\n\n      <div className=\"post-content\">\n        <h3 className=\"post-title\" onClick={handleTitleClick}>\n          {post.title}\n        </h3>\n\n        {post.description && (\n          <p className=\"post-description\">{post.description.substring(0, 150)}...</p>\n        )}\n\n        <div className=\"post-footer\">\n          <span className={`source-badge ${post.source}`}>\n            {isReddit && 'Reddit'}\n            {isYoutube && 'YouTube'}\n          </span>\n\n          <div className=\"post-stats\">\n            {isReddit && (\n              <span className=\"stat\">\n                {(post.score / 1000).toFixed(1)}k\n              </span>\n            )}\n            {isYoutube && (\n              <span className=\"stat\">\n                {(post.views / 1000).toFixed(1)}k views\n              </span>\n            )}\n          </div>\n\n          <span className=\"post-author\">by {post.author}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PostCard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}